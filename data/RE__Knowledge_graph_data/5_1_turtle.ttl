@prefix ns: <NS/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

ns:Program ns:hasBBList ns:BasicBlocks ;
    ns:hasCFPS ns:CFPS ;
    ns:hasID "5" ;
    ns:startNodeId "1" .

<NS/-2903104631246586141> ns:hasExpression "int(input('Enter a number: '))" ;
    ns:hasStatementSideType 3 ;
    ns:hasStatementSideTypeStr "StatementSideType.Expression" .

<NS/1842827650042712442> ns:hasExpression "1" ;
    ns:hasStatementSideType 2 ;
    ns:hasStatementSideTypeStr "StatementSideType.Constant" ;
    ns:hasValue "1" .

<NS/2010630449889858921> ns:hasExpression "0" ;
    ns:hasStatementSideType 2 ;
    ns:hasStatementSideTypeStr "StatementSideType.Constant" ;
    ns:hasValue "0" .

<NS/5462458905504340028> ns:hasExpression "num % i" ;
    ns:hasStatementSideType 3 ;
    ns:hasStatementSideTypeStr "StatementSideType.Expression" .

ns:BasicBlocks ns:hasBB <NS/1>,
        <NS/2>,
        <NS/3>,
        <NS/5>,
        <NS/6>,
        <NS/7>,
        <NS/9> .

ns:CFPS ns:hasPath [ ns:Path [ ns:nextBlock <NS/1> ] ;
            ns:hasID 1 ] .

ns:stmtAtLine1 ns:hasBlockLineNo 1 ;
    ns:hasLHSs [ ns:hasLHS <NS/6235545832324534736> ] ;
    ns:hasLineNo 1 ;
    ns:hasOperator 26 ;
    ns:hasOperatorStr "Operator.Assign" ;
    ns:hasRHS <NS/-2903104631246586141> ;
    ns:hasStmtType 1 ;
    ns:hasStmtTypeStr "StatementType.Expression"^^xsd:integer ;
    ns:hasVarDefs [ ns:hasVarDef <NS/1355424289974976698> ] ;
    ns:stmtString "num = int(input('Enter a number: '))" .

ns:stmtAtLine10 ns:hasBlockLineNo 1 ;
    ns:hasLineNo 10 ;
    ns:hasStmtType 1 ;
    ns:hasStmtTypeStr "StatementType.Expression"^^xsd:integer ;
    ns:hasVarUses [ ns:hasVarUse <NS/1355424289974976698> ] ;
    ns:stmtString "print(num, 'is a prime number')" .

ns:stmtAtLine12 ns:hasBlockLineNo 1 ;
    ns:hasLineNo 12 ;
    ns:hasStmtType 1 ;
    ns:hasStmtTypeStr "StatementType.Expression"^^xsd:integer ;
    ns:hasVarUses [ ns:hasVarUse <NS/1355424289974976698> ] ;
    ns:stmtString "print(num, 'is not a prime number')" .

ns:stmtAtLine3 ns:hasBlockLineNo 1 ;
    ns:hasLHS <NS/6235545832324534736> ;
    ns:hasLineNo 3 ;
    ns:hasOperator 20 ;
    ns:hasOperatorStr "Operator.Gt" ;
    ns:hasRHS <NS/1842827650042712442> ;
    ns:hasStmtType 2 ;
    ns:hasStmtTypeStr "StatementType.Condition"^^xsd:integer ;
    ns:hasVarUses [ ns:hasVarUse <NS/1355424289974976698> ] ;
    ns:stmtString "if num > 1:" .

ns:stmtAtLine4 ns:hasBlockLineNo 1 ;
    ns:hasLineNo 4 ;
    ns:hasStmtType 3 ;
    ns:hasStmtTypeStr "StatementType.Loop"^^xsd:integer ;
    ns:hasVarDefs [ ns:hasVarDef <NS/4403904741417888450> ] ;
    ns:hasVarUses [ ns:hasVarUse <NS/1355424289974976698> ] ;
    ns:stmtString "for i in range(2, num):" .

ns:stmtAtLine5 ns:hasBlockLineNo 1 ;
    ns:hasLHS <NS/5462458905504340028> ;
    ns:hasLineNo 5 ;
    ns:hasOperator 16 ;
    ns:hasOperatorStr "Operator.Eq" ;
    ns:hasRHS <NS/2010630449889858921> ;
    ns:hasStmtType 2 ;
    ns:hasStmtTypeStr "StatementType.Condition"^^xsd:integer ;
    ns:hasVarUses [ ns:hasVarUse <NS/1355424289974976698>,
                <NS/4403904741417888450> ] ;
    ns:stmtString "if num % i == 0:" .

ns:stmtAtLine6 ns:hasBlockLineNo 1 ;
    ns:hasLineNo 6 ;
    ns:hasStmtType 1 ;
    ns:hasStmtTypeStr "StatementType.Expression"^^xsd:integer ;
    ns:hasVarUses [ ns:hasVarUse <NS/1355424289974976698> ] ;
    ns:stmtString "print(num, 'is not a prime number')" .

ns:stmtAtLine7 ns:hasBlockLineNo 2 ;
    ns:hasLineNo 7 ;
    ns:hasOperator 5 ;
    ns:hasOperatorStr "Operator.FloorDiv" ;
    ns:hasStmtType 1 ;
    ns:hasStmtTypeStr "StatementType.Expression"^^xsd:integer ;
    ns:hasVarUses [ ns:hasVarUse <NS/1355424289974976698>,
                <NS/4403904741417888450> ] ;
    ns:stmtString "print(i, 'times', num // i, 'is', num)" .

<NS/6235545832324534736> ns:hasExpression "num" ;
    ns:hasStatementSideType 1 ;
    ns:hasStatementSideTypeStr "StatementSideType.Variable" ;
    ns:hasVarUses [ ns:hasVarUse <NS/1355424289974976698> ],
        [ ns:hasVarUse <NS/1355424289974976698> ] .

<NS/1> ns:hasBlkCtgry ns:BLKCTGRY1 ;
    ns:hasBlkCtgryStr ns:BLKCTGRYSTRBlockCategory.NONE ;
    ns:hasID "1" ;
    ns:hasStmtList [ ns:hasStmt ns:stmtAtLine1 ] ;
    ns:hasSuccessor <NS/2> ;
    ns:nextBlock <NS/2> .

<NS/4403904741417888450> ns:hasValue "i" .

<NS/5> ns:hasBlkCtgry ns:BLKCTGRY4 ;
    ns:hasBlkCtgryStr ns:BLKCTGRYSTRBlockCategory.ConditionalFalse ;
    ns:hasID "5" ;
    ns:hasPredecessor <NS/2> ;
    ns:hasStmtList [ ns:hasStmt ns:stmtAtLine12 ] .

<NS/7> ns:hasBlkCtgry ns:BLKCTGRY3 ;
    ns:hasBlkCtgryStr ns:BLKCTGRYSTRBlockCategory.ConditionalTrue ;
    ns:hasID "7" ;
    ns:hasPredecessor <NS/6> ;
    ns:hasStmtList [ ns:hasStmt ns:stmtAtLine6,
                ns:stmtAtLine7 ] ;
    ns:hasSuccessor <NS/3> .

<NS/9> ns:hasBlkCtgry ns:BLKCTGRY4 ;
    ns:hasBlkCtgryStr ns:BLKCTGRYSTRBlockCategory.ConditionalFalse ;
    ns:hasID "9" ;
    ns:hasPredecessor <NS/6> ;
    ns:hasStmtList [ ns:hasStmt ns:stmtAtLine10 ] ;
    ns:hasSuccessor <NS/3> .

<NS/6> ns:hasBlkCtgry ns:BLKCTGRY2 ;
    ns:hasBlkCtgryStr ns:BLKCTGRYSTRBlockCategory.ConditionalIf ;
    ns:hasID "6" ;
    ns:hasPredecessor <NS/3> ;
    ns:hasStmtList [ ns:hasStmt ns:stmtAtLine5 ] ;
    ns:hasSuccessor <NS/7>,
        <NS/9> .

<NS/2> ns:hasBlkCtgry ns:BLKCTGRY2 ;
    ns:hasBlkCtgryStr ns:BLKCTGRYSTRBlockCategory.ConditionalIf ;
    ns:hasID "2" ;
    ns:hasPredecessor <NS/1> ;
    ns:hasStmtList [ ns:hasStmt ns:stmtAtLine3 ] ;
    ns:hasSuccessor <NS/3>,
        <NS/5> ;
    ns:nextBlock <NS/5> .

<NS/3> ns:hasBlkCtgry ns:BLKCTGRY3 ;
    ns:hasBlkCtgryStr ns:BLKCTGRYSTRBlockCategory.ConditionalTrue ;
    ns:hasID "3" ;
    ns:hasPredecessor <NS/2>,
        <NS/7>,
        <NS/9> ;
    ns:hasStmtList [ ns:hasStmt ns:stmtAtLine4 ] ;
    ns:hasSuccessor <NS/6> .

<NS/1355424289974976698> ns:hasValue "num" .

